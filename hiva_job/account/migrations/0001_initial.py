# Generated by Django 5.1.3 on 2024-12-12 18:19

import django.core.validators
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Cities',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('state_code', models.CharField(max_length=255)),
                ('country_code', models.CharField(max_length=2)),
                ('latitude', models.DecimalField(decimal_places=8, max_digits=10)),
                ('longitude', models.DecimalField(decimal_places=8, max_digits=11)),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('flag', models.SmallIntegerField()),
                ('wikidataid', models.CharField(blank=True, db_column='wikiDataId', db_comment='Rapid API GeoDB Cities', max_length=255, null=True)),
            ],
            options={
                'db_table': 'cities',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Countries',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('iso3', models.CharField(blank=True, max_length=3, null=True)),
                ('numeric_code', models.CharField(blank=True, max_length=3, null=True)),
                ('iso2', models.CharField(blank=True, max_length=2, null=True)),
                ('phonecode', models.CharField(blank=True, max_length=255, null=True)),
                ('capital', models.CharField(blank=True, max_length=255, null=True)),
                ('currency', models.CharField(blank=True, max_length=255, null=True)),
                ('currency_name', models.CharField(blank=True, max_length=255, null=True)),
                ('currency_symbol', models.CharField(blank=True, max_length=255, null=True)),
                ('tld', models.CharField(blank=True, max_length=255, null=True)),
                ('native', models.CharField(blank=True, max_length=255, null=True)),
                ('region', models.CharField(blank=True, max_length=255, null=True)),
                ('subregion', models.CharField(blank=True, max_length=255, null=True)),
                ('nationality', models.CharField(blank=True, max_length=255, null=True)),
                ('timezones', models.TextField(blank=True, null=True)),
                ('translations', models.TextField(blank=True, null=True)),
                ('latitude', models.DecimalField(blank=True, decimal_places=8, max_digits=10, null=True)),
                ('longitude', models.DecimalField(blank=True, decimal_places=8, max_digits=11, null=True)),
                ('emoji', models.CharField(blank=True, max_length=191, null=True)),
                ('emojiu', models.CharField(blank=True, db_column='emojiU', max_length=191, null=True)),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField()),
                ('flag', models.SmallIntegerField()),
                ('wikidataid', models.CharField(blank=True, db_column='wikiDataId', db_comment='Rapid API GeoDB Cities', max_length=255, null=True)),
            ],
            options={
                'db_table': 'countries',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Regions',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('translations', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField()),
                ('flag', models.SmallIntegerField()),
                ('wikidataid', models.CharField(blank=True, db_column='wikiDataId', db_comment='Rapid API GeoDB Cities', max_length=255, null=True)),
            ],
            options={
                'db_table': 'regions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='States',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('country_code', models.CharField(max_length=2)),
                ('fips_code', models.CharField(blank=True, max_length=255, null=True)),
                ('iso2', models.CharField(blank=True, max_length=255, null=True)),
                ('type', models.CharField(blank=True, max_length=191, null=True)),
                ('latitude', models.DecimalField(blank=True, decimal_places=8, max_digits=10, null=True)),
                ('longitude', models.DecimalField(blank=True, decimal_places=8, max_digits=11, null=True)),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField()),
                ('flag', models.SmallIntegerField()),
                ('wikidataid', models.CharField(blank=True, db_column='wikiDataId', db_comment='Rapid API GeoDB Cities', max_length=255, null=True)),
            ],
            options={
                'db_table': 'states',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Subregions',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('translations', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField()),
                ('flag', models.SmallIntegerField()),
                ('wikidataid', models.CharField(blank=True, db_column='wikiDataId', db_comment='Rapid API GeoDB Cities', max_length=255, null=True)),
            ],
            options={
                'db_table': 'subregions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('phone', models.CharField(blank=True, max_length=15, null=True, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format: '09121314156'", regex='^\\d{11}$')])),
                ('email', models.CharField(blank=True, max_length=255, null=True)),
                ('send_at', models.DateTimeField(auto_now_add=True)),
                ('kind', models.CharField(choices=[('email', 'Email'), ('sms', 'Sms')])),
                ('type', models.CharField(choices=[('otp', 'Otp'), ('login', 'Loign'), ('order', 'Order'), ('resume', 'Resume'), ('expire', 'Expire')])),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('sent', 'Sent'), ('delivered', 'Delivered'), ('undelivered', 'Undelivered'), ('failed', 'Failed')], default='pending')),
                ('content', models.TextField(blank=True, null=True)),
                ('message_id', models.CharField(blank=True, null=True)),
            ],
            options={
                'db_table': 'message',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('phone', models.CharField(blank=True, max_length=15, null=True, unique=True, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format: '09121314156'", regex='^\\d{11}$')])),
                ('email', models.EmailField(blank=True, max_length=254, null=True, unique=True)),
                ('password', models.CharField(blank=True, max_length=128, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
        ),
    ]
